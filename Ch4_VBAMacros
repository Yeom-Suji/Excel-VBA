#VBA를 활용한 자동화? (노가다 < 파워쿼리 < VBA)

 파워쿼리의 한계.. KPI보고서 같은 지독한 보고서들은 VBA로 해결해야함



#VBA 매크로

1. 일반 매크로: 맨 땅에 헤딩
2. 자동매크로: 엑셀 워크시트 창에서 메뉴 클릭을 통해 작업하는 과정을 엑셀이 자동으로 VBA언어로 바꾸는 매크로
	- 처리속도가 어마무시하게 느리다
	- 자동매크로로 기록이 안되는 작업들이 많다----> 99%는 자동매크로는 실무에서 사용하면 안됨
	   ex) 출력 매크로 개발자 느낌으로 수정하기



#VBA 매크로 시작하기

1. 매크로(macro): 반복되는 작업을 기록해 두었다가 필요시 단축키 또는 버튼만 누르면 해당 작업을 자동으로 실행할 수 있는 기능
	매크로 기능이 들어있는 파일을 ‘매크로 파일’이라고 부름
2. VBA(Visual Basic for Application): MS사의 윈도 오피스 응용 프로그램용 프로그래밍 언어
3. VBE(Visual Basic Editor): VBA로 코딩하기 위한 편집창
4. 준비단계로 최적화하기
	코딩 전용 글꼴: 네이버, 무료 배포 -> 나눔고딕코딩 설치하기
	개발도구에서 VBE, 아니면 우클 코드보기, 아니면 alt +f11
	필수창 3개는 항상 띄워놓기 (프로젝트창(프로젝트탐색기), 속성창, 코드창)
	보기 메뉴에서 도구모음 -> 편집툴도 꺼내기
	도구 메뉴 -> 옵션 -> 편집기에서 변수 선언 요구(변수에 에러나면 친절하게 알려줌)
	도구메뉴 -> 옵션 -> 편집기 형식 -> 글씨체 나눔고딕코딩(한글)
5. 모듈 만들기
	파일 정확하게 선택하고 모듈 삽입
6. sub 프로시저명 -----------------> 족보형태☆☆☆☆☆☆☆☆☆☆☆☆
	-프로시저 이름과 변수 이름 빼고 코드는 모두 소문자로 쓰자
		- 엑셀 개체 모델: 족보
			가장 상위의 개체는 application(엑셀 프로그램 전체) > workbooks collection(엑셀 통합 문서들) > worksheets collection(시트) > range/cells(셀)
		     ex) Sub Object_1()
  		        Application.Workbooks("개체모델.xlsm").Worksheets("취합").Range("a1") = "SJY"
		          Application.Workbooks("개체모델.xlsm").Worksheets("취합").Cells(2,1) = "SJY" -> Cells(2, "a")도 가능
 			       End Sub
			(어플리케이션 솔직히 생략 가능)
7.매크로 단추 넣기
	개발도구 -> 삽입 -> 단추 -> 설정할때 파일이름
	오류는 디버그로 확인 -> 파란 상자 눌러서 노란불 끄고 -> 디버깅하기
	*시트의 이름이 변경돼서 매크로 단추에 오류가 날때? Sheet1.Range("a1:c10") = "Power Query" 처럼 VBA가 인지하는 이름으로 바로 넣기



#VBA 매크로 코딩하기

8. Range 개체 핸들링
	Sheet1.Range("a1") = "연진아, 나 오늘 VBA 코딩했다"
	Sheet1.Cells(1, 52) = "재준"
	Sheet1.Cells(1, "az") = "재준"
  
9. End 속성
    Sheet2.Range("d1").End(xlToLeft).Select
    Sheet2.Range("a1").End(xlToRight).Select
    Sheet2.Range("d10").End(xlUp).Select
    Sheet2.Range("d1").End(xlDown).Select
 = Sheet2.Range("d1").End(1).Select
    Sheet2.Range("a1").End(2).Select
    Sheet2.Range("d10").End(3).Select
    Sheet2.Range("d1").End(4).Select
    	- 해당 열에 빈 세링 존재할 때 마지막 셀 선택하는 코드☆☆☆☆☆
		Sheet2.Cells(Rows.Count, "a").End(3).Select -> 3 or xlUp -> 외울 때 "세즈로즈 카운트에이 엔드 엑셀업"
    
10. 실행 바로가기
	- f5는 마지막 코드 실행
	- f8은 위에서부터 순서대로 실행	
  
11. Range 개체를 가지고 연속된 범위 설정
	Sheet2.Range("a1").CurrentRegion.Select
	Sheet2.Range("a1").CurrentRegion.Copy Sheet2.Range("k1") ------> 범위 설정한거 복사 붙여넣기
   	ex) Sheet2.Range("a20:d40") = "현업 데이터 분석가"
   	    Sheet2.Range("a20:d40").CurrentRegion.Copy Sheet2.Range("k20")
- 데이터가 있는 연속된 범위 바로가기: ctrl + shift + 8
- 범위안에 모두 같은 값 넣기: ctrl+enter

12. 메서드: 실행 명령 -----------------> 지워 카피해 선택해
☆☆☆☆☆☆☆☆☆☆개체.메서드
	1) 지우기 예제(3가지)
    		- Sheet3.Range("a8:a9").Delete ->  아래쪽 데이터가 위로 올라가서 셀의 주소가 바뀌어 위험하다. 근데 많이 씀
    		- Sheet3.Range("a5:a7").ClearContents -> 지정 셀 데이터만 지워지고 서식은 안지워짐
    		- Sheet3.Range("a1:a4").Clear -> 셀 데이터와 서식 모두 지워짐. 아래쪽 데이터가 위로 올라가지 않음
        
💥 참고
최준선 VBA 바이블 책 추천

13. 속성: 개체의 속성 표현 ------------> 색깔, 크기 함 바꿔봐 ☆☆☆☆☆☆☆☆☆☆개체.속성 = 속성값
	1) 색칠하기(3가지)
		Sub Property_1()
		- Sheet4.Range("a1:a4").Interior.Color = vbYellow ---> 비비드해서 안예쁨
		- Sheet4.Range("a5:a7").Interior.ColorIndex = 24 ----> 1~56
			Sheet4.Range("b5:b7").Interior.ColorIndex = 44
			Sheet4.Range("c5:c7").Interior.ColorIndex = 45
			Sheet4.Range("d5:d7").Interior.ColorIndex = 46
    - Sheet4.Range("a2").Interior.Color = RGB(123, 25, 11) ----> 원하는 색 쓸 수 있음
    
14. With문으로 코드 효율화(처리속도↑)
	Sub with_1()
		With Sheet1
		.Range("a1").CurrentRegion.Interior.ColorIndex = 44
		.Range("a1").CurrentRegion.Copy .Range("f1")
		End With
	End Sub
  
		With Sheet1
		.Range("a1").CurrentRegion
		.Range("a1", .Range("a1").End(xlDown))
		.Range("c1", .Cells(Rows.Count, "c").End(3))
		End With
    
		With Sheet1.Range("a1") 
		.Font.Bold = True
		.Font.Name = "돋움체" 
		.Interior.ColorIndex = 32
		End With
    
    
    
#VBA 매크로 변수 활용

15. 변수: 값을 저장하는 값
	1) 일반변수
		변수는 프로시저 밑에서 정의해 주어야함, long 은 숫자(integer는 쁠마 삼만이천), string은 문자
		Sub variable_1()
  		   Dim i As Long
  		   Dim MyStr As String
   			 With Sheet2
    			    i = 1
    			    MyStr = "우크라이나"
    			    .Range("a1") = i + 10
     			    .Range("a2") = MyStr & "에 평화를"
			  End With
		End Sub
    
	2) 개체변수
		as 뒤에는 개체의 이름을 적으면 됨, 그리고 개체변수는 앞에 무조건 Set써주기, select 대신에 개체변수 설정
		Sub Variable_2()
 		   Dim rng As Range
  		     Set rng = Sheet3.Range("a1").CurrentRegion
 		     rng.Select
		End Sub
    
		Sub Variable_2()
 		   Dim rng As Range
 			With rng
   			  .Interior.ColorIndex = 44
			  .Copy .Range("h1")
 			End With
		End Sub
	3) 배열변수(처리속도↑)
	4) 사용자지정변수: 첨부터 끝까지 개발자가 세팅하는 변수
	5) 지역변수와 전역변수
  
16. 변수 검증
	1) 일반변수에 들어온 값 확인하기 (2가지)
		-f8 + 양손: 실행시키고 마우스로 lR 가리키기
		-msgbox lR: 실행하면 메세지로 뜸
    
		Sub CheckVariable()
		   Dim lR As Long, lR_1 As Long
			With Sheet1
			  'A열에 데이터가 있는 마지막 셀의 행번호를 lR 변수에 받아라 -> 행번호는 row이고 일반변수임(숫자)니까 Set안함
 			  lR = .Cells(Rows.Count, "a").End(3).Row
			  MsgBox lR
			  'B열에 데이터가 있는 마지막 셀의 행번호를 lR_1이라는 변수에 받아라
			  '그런 다음, lR_1변수에 들어온 값이 정확한지 확인하는 코드를 생성하라
			  lR_1 = .Cells(Rows.Count, "b").End(3).Row
			  MsgBox lR_1
			End With
		End Sub
    
	2) 개체변수에 들어온 값 확인하기 (2가지)
		-개체변수.select
		-조사식창 -> 중단점 설정하고 조사식창으로 확인
    
	  Sub CheckVariable()
		   Dim rng As Range
			With Sheet1
			Set rng = .Range("a1").CurrentRegion
			rng.Select
			End With
		End Sub
    
17. if 조건문
18. 반복문
	Sub Result()
		With Sheet1
		'for 변수명 = 변수의 시작값 to 변수의 종료값
		Dim i As Long
			For i = 2 To 10
 			   If .Cells(i, "b") >= 500 Then
			       .Cells(i, "c") = "A"
 			   ElseIf .Cells(i, "b") >= 400 Then
   			        .Cells(i, "c") = "B"
    			ElseIf .Cells(i, "b") >= 300 Then
     			      .Cells(i, "c") = "C"
    			ElseIf .Cells(i, "b") >= 200 Then
     			      .Cells(i, "c") = "D"
   			 Else
   			    .Cells(i, "c") = "FFFFFF"
  			  End If
			Next
		    End With
	End Sub



🔸 실무버전으로 업그레이드
	1. 매크로 버튼 꼭 만들기
	2. For i = 2 to 10 처럼 10 -> 하드코딩 하지 말기
		Sub Result()
		Dim i As Long, lR as long
		With Sheet1
			lR  = .cells(rows.count,"a").end(3).row
			For i = 2 To lR
	3. 기존 데이터를 지우고 매크로가 실행되도록 해야함
		- 기존데이터 지우기(2가지)
			+ .range("c2:c" & lR).clearcontents
	4. Application.ScreenUpdating = False/True
	   처리 속도를 올려줌, 마지막 End sub 전줄에서 True 로 끝내줘야함!!!!



💥 미션 
회귀분석 매크로 버튼을 클릭했을 때 분석 도구와 분석도구-VBA툴이 활성화 되는 코드까지 현재 매크로에 추가하라



#VBA 코딩 순서 -> 로직을 세우고 결과물을 그림으로 그려봐, 반복되는건 뭐가있지?

Sub RemoveRows()
특정한 조건을 만족하는 행 제거
Dim lR As Long, i As Long
Application.ScreenUpdating = False
With Sheet3
lR = .Cells(Rows.Count, "a").End(3).Row
뒤에서 부터 지우면 위에 행 번호가 바뀌지 않음, step뒤에가 증가 폭
For i = lR To 2 Step -1
만약에 셀이 Bentley로 시작하면 then, *Bentley* 포함되면
If .Cells(i, "a") Like "Bentley*" Then
Bentley로 시작하는 셀이 포함된 전체 행을 삭제하겠다
.Cells(i, "a").EntireRow.Delete
End If
Next
End With
Application.ScreenUpdating = True
End Sub



💥 참고
'처리속도 2배 빨리하기 유튜브 VBA영상에 8번영상 유니온



💥 미션
회귀분석 매크로 버튼을 클릭했을 때
분석도구, 분석도구-VBA 툴이 활성화되는 코드까지
현재 매크로에 추가하라!
- 주문 시트에 데이터 가져오기
- Dashboard 시트에 : 피벗 테이블(고객세그먼트별, 지역별) + 차트 그려지기
- 주문 시트에 매크로 버튼 생성
- 위 3가지 항목 필수
- 추가로 고도화 하시는 것도 가능
